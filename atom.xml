<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Metoor</title>
  <subtitle>just do it.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://metoor.github.io/"/>
  <updated>2017-08-03T12:59:10.244Z</updated>
  <id>http://metoor.github.io/</id>
  
  <author>
    <name>Metoor</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>a*寻路算法总结</title>
    <link href="http://metoor.github.io/2017/08/03/thinking-about-a-star-algorithm/"/>
    <id>http://metoor.github.io/2017/08/03/thinking-about-a-star-algorithm/</id>
    <published>2017-08-03T12:16:15.000Z</published>
    <updated>2017-08-03T12:59:10.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>最近想做一个<a href="https://baike.baidu.com/item/%E8%A7%92%E8%89%B2%E6%89%AE%E6%BC%94%E6%B8%B8%E6%88%8F/1730573?fr=aladdin&amp;fromid=24462&amp;fromtitle=rpg" title="点我了解详情" target="_blank" rel="external">RPG</a>类型的游戏，对于RPG游戏而言寻路算法是非常必要的。现在将它记在博客以便日后复习。这里只是一个简单的实现，等空下来会用二叉堆（<a href="http://blog.csdn.net/zxz414644665/article/details/15337107" title="点我了解详情" target="_blank" rel="external">Binary Heaps</a>）来实现。<br><a id="more"></a><br>在计算机科学中，A*算法广泛应用于寻路和图的遍历。最早是于1968年，由Peter Hart, Nils Nilsson 和Bertram Raphael3人在斯坦福研究院描述了 该算法。是对Dijkstra算法的一种扩展。是一种高效的搜索算法。</p>
<p>这是个比较常用的算法，游戏中的寻路通常会使用这个算法，在理解这个算法之前，先明白几个概念：</p>
<h2 id="搜索区域（The-Search-Area）"><a href="#搜索区域（The-Search-Area）" class="headerlink" title="搜索区域（The Search Area）"></a>搜索区域（The Search Area）</h2><p>搜索区域可以划分为正方形格子，但不限于此，六边形，矩形，平行四边形都可以。因此他们的中心点通常称为节点(Node)，而不是方格(Squares)。</p>
<p>##路径排序(Path Sorting)</p>
<p>在没有任何障碍的地图上，一个节点可以有4个方向甚至8个方向移动可能。那么如何选择走那个路径呢，判断的依据就是这个公式：<br>f = g + h;</p>
<p>g是起点到指定格子的移动代价，h是指定格子到达终点的估算成本，f值则是两者之和。</p>
<p>假设横纵走一格的代价为10， 对角线为14，那么起点往左走一格的g值为10。 </p>
<h2 id="启发函数（Heuristics-function）"><a href="#启发函数（Heuristics-function）" class="headerlink" title="启发函数（Heuristics function）"></a>启发函数（Heuristics function）</h2><p>h值属于估算成本，不同的估算方法对应不同的结果。选取适合的估算方法需要根据实际场景而定。我们成这种估算函数为启发函数，例如，允许4个方向走，那么可以采用曼哈顿距离（Manhattan distance）， 即横向和竖向走到终点的距离之和。启发函数的作用在于，当你把启发代价设定的比实际代价更大时，那么搜索速度会变得更快，但结果可能不是最优的路径。相反，<br>启发代价比实际的小，那么搜索变慢，得到一个最优路径。这是速度 与最优解之间的权衡</p>
<p>开放列表(Open List)<br>开放列表实际上是一个待检测的格子列表，对应的，我们把检测过的格子放入Close List中。</p>
<p>以上是A<em>的关键点，尤其是启发函数，如果没有启发函数，则A</em>就退化成了Dijkstra算法，是运行效率重要还是找到最佳路径重要，全靠启发函数来调节，因此也被归为启发式算法。</p>
<h2 id="A-算法的具体步骤："><a href="#A-算法的具体步骤：" class="headerlink" title="A*算法的具体步骤："></a>A*算法的具体步骤：</h2><ol>
<li>把起点加入 open list 。</li>
<li>重复如下过程：</li>
<li>遍历 open list ，查找 F 值最小的节点，把它作为当前要处理的节点。</li>
<li>把这个节点移到 close list 。</li>
<li>对当前方格的 8 个相邻方格的每一个方格？<br>(1). 如果它是不可抵达的或者它在 close list 中，忽略它。否则，做如下操作。<br>(2). 如果它不在 open list 中，把它加入 open list ，并且把当前方格设置为它的父亲，记录该方格的 F ， G 和 H 值。<br>(3). 如果它已经在 open list 中，检查这条路径 ( 即经由当前方格到达它那里 ) 是否更好，用 G 值作参考。更小的 G 值表示这是更好的路径。如果是这样，把它的父亲设置为当前方格，并重新计算它的 G 和 F 值。如果你的 open list 是按 F 值排序的话，改变后你可能需要重新排序。</li>
<li>停止，当你<br>(1). 把终点加入到了 open list 中，此时路径已经找到了<br>(2). 查找终点失败，并且 open list 是空的，此时没有路径。</li>
<li>保存路径。从终点开始，每个方格沿着父节点移动直至起点，这就是你的路径。<h2 id="程序运行截图"><a href="#程序运行截图" class="headerlink" title="程序运行截图"></a>程序运行截图</h2><img src="/2017/08/03/thinking-about-a-star-algorithm/demoScreenShoot.png" alt="demoScreenShoot.png" title="">
</li>
</ol>
<p>好了，就讲到这里了。程序源码<a href="https://github.com/metoor/astar" title="Metoor&#39;s github" target="_blank" rel="external">点我查看</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;最近想做一个&lt;a href=&quot;https://baike.baidu.com/item/%E8%A7%92%E8%89%B2%E6%89%AE%E6%BC%94%E6%B8%B8%E6%88%8F/1730573?fr=aladdin&amp;amp;fromid=24462&amp;amp;fromtitle=rpg&quot; title=&quot;点我了解详情&quot;&gt;RPG&lt;/a&gt;类型的游戏，对于RPG游戏而言寻路算法是非常必要的。现在将它记在博客以便日后复习。这里只是一个简单的实现，等空下来会用二叉堆（&lt;a href=&quot;http://blog.csdn.net/zxz414644665/article/details/15337107&quot; title=&quot;点我了解详情&quot;&gt;Binary Heaps&lt;/a&gt;）来实现。&lt;br&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://metoor.github.io/categories/algorithm/"/>
    
    
      <category term="node.js" scheme="http://metoor.github.io/tags/node-js/"/>
    
      <category term="a*" scheme="http://metoor.github.io/tags/a/"/>
    
  </entry>
  
  <entry>
    <title>使用github+hexo搭建个人博客</title>
    <link href="http://metoor.github.io/2017/04/22/use-github-and-hexo-build-blog/"/>
    <id>http://metoor.github.io/2017/04/22/use-github-and-hexo-build-blog/</id>
    <published>2017-04-22T07:22:38.000Z</published>
    <updated>2017-04-22T14:57:00.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>　　这个是本站的第一篇文章，我们该写点什么呢？很简单我们就写下本站是怎么搭建的吧。我们需要用到的框架是<a href="https://hexo.io/" title="详情" target="_blank" rel="external">HEXO</a>： 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a id="more"></a></p>
<h2 id="搭建node-js环境"><a href="#搭建node-js环境" class="headerlink" title="搭建node.js环境"></a>搭建node.js环境</h2><p>在安装HEXO之前需要先安装:</p>
<ul>
<li><a href="https://nodejs.org/en/download/" title="点我去下载" target="_blank" rel="external">Node.js</a></li>
<li><a href="https://git-scm.com/downloads" title="点我去下载" target="_blank" rel="external">Git</a></li>
</ul>
<p>现在我们开始搭建Node.js环境，我这里以安装windows（win8.1）平台为例。点击上面的Node.js下载对应的版本</p>
<img src="/2017/04/22/use-github-and-hexo-build-blog/downloadnode.png" alt="downloadnode.png" title="">
<ol>
<li>下载好后双击运行，跟着安装向导走就可以了，这里不多说。安装完成后正常情况下会自动设置好环境变量。</li>
<li>点击开始-运行-cmd（win+R），打开dos，输入<code>node -v</code>检查Node.js版本：<br>出现上述输出则表示你已经成功安装node.js</li>
<li>使用cmd命令行输入<code>npm -v</code>来测试是否安装成功,如果成功会输出npm的版本号，这里就不放图片了。</li>
<li>好了到这一步node.js已经装好了。详细教程可以参考<a href="http://www.cnblogs.com/zhouyu2017/p/6485265.html" title="详细教程" target="_blank" rel="external">这里</a></li>
</ol>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>点击上面的Git链接会打开如下页面：<br><img src="/2017/04/22/use-github-and-hexo-build-blog/downloadgit.png" alt="downloadgit.png" title=""></p>
<ol>
<li>下载好后，双击运行安装程序，跟着向导安装就好了。</li>
<li>关于git的一些基本使用命令可以参考这里<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" title="快点我" target="_blank" rel="external">点我</a></li>
</ol>
<h2 id="安装HEXO"><a href="#安装HEXO" class="headerlink" title="安装HEXO"></a>安装HEXO</h2><ol>
<li>哈哈！！！终于到这一步了，其实这一步很简单，因为前面的安装好了这里用npm会非常简单哦。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<ol>
<li><p>安装完成以后输入 <code>hexo -v</code>出现如下界面则表示Hexo安装成功了:</p>
 <img src="/2017/04/22/use-github-and-hexo-build-blog/hexofinsh.png" alt="hexofinsh.png" title=""></li>
<li>接下可以初始化我们的博客了，分别执行下面的命令（有没有很激动呢。。。）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<ol>
<li>依赖项装完以后可以在本地预览</li>
<li>首先执行<code>hexo generate</code>生成博客的静态页面</li>
<li>然后执行<code>hexo server</code>开启本地预览，在浏览器打开 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a><img src="/2017/04/22/use-github-and-hexo-build-blog/finish.png" alt="finish.png" title="">
</li>
</ol>
<p>哈哈，有没有看到上述页面。到这里博客就创建好了。</p>
<h2 id="config-yml配置"><a href="#config-yml配置" class="headerlink" title="_config.yml配置"></a>_config.yml配置</h2><p>具体配置请参考<a href="https://hexo.io/zh-cn/docs/configuration.html" title="快点我" target="_blank" rel="external">这里</a></p>
<h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><ol>
<li>注册github：部署到github自然需要有一个github账号啦。这个没什么好说的了。</li>
<li>新建创库，这个用文字表达起来会略显繁琐，所以这里直接上图<img src="/2017/04/22/use-github-and-hexo-build-blog/git_1.png" alt="git_1.png" title="">
<img src="/2017/04/22/use-github-and-hexo-build-blog/git_2.png" alt="git_2.png" title=""></li>
<li><p>创建好仓库以后，我们需要打开_config.yml文件，添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">type: git</div><div class="line">repository: https://github.com/yourname/yourname.github.io</div><div class="line">branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>现在就差最后一步就可以部署到github了（很激动有没有，博客终于可以上线了，哈哈。。。）。now，执行下面的命令<code>$ npm install hexo-deployer-git --save</code>。最后一步部署命令<code>$ hexo deploy</code>。</p>
</li>
<li>到这里本教程就完成了。赶紧打开浏览器输入<a href="http://yourgitname.gihub.io" target="_blank" rel="external">http://yourgitname.gihub.io</a> 看看你的成果吧。<br>ps：第一次用MarkDown来写博客，写的不好莫怪哈。有错请指正。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;　　这个是本站的第一篇文章，我们该写点什么呢？很简单我们就写下本站是怎么搭建的吧。我们需要用到的框架是&lt;a href=&quot;https://hexo.io/&quot; title=&quot;详情&quot;&gt;HEXO&lt;/a&gt;： 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;br&gt;
    
    </summary>
    
      <category term="HEXO" scheme="http://metoor.github.io/categories/HEXO/"/>
    
    
      <category term="HEXO" scheme="http://metoor.github.io/tags/HEXO/"/>
    
      <category term="blog" scheme="http://metoor.github.io/tags/blog/"/>
    
  </entry>
  
</feed>
